#version 430 core                                                                   
   
#define M_PI		3.141592653589793238462643383279f
#define M_PI_2		6.283185307179586476925286766559f
#define M_PI_INV	0.318309886183790671537767526745f
#define M_PI_2_INV	0.159154943091895335768883763372f
#define SHADOW_BIAS 0.0001f
                                                                       
layout (isolines) in;     

in float arclengthTCS[];

out vec3 yarn_dir;
out vec4 w_pos;
out vec4 w_shadowPos;
out float ply_shift;

uniform mat4		view_matrix;
uniform mat4		shadow_matrix;

vec4 Bezier( float s, vec4 b0, vec4 b1, vec4 b2, vec4 b3 )
{
	float t = 1-s;
	float tt = t*t;
	float ts = t*s;
	float ss = s*s;
	return tt*t*b0 + 3*tt*s*b1 + 3*t*ss*b2 + s*ss*b3;
}

vec3 BezierDeriv( float s, vec3 b0, vec3 b1, vec3 b2, vec3 b3 )
{
	float t = 1-s;
	return 3*t*t*(b1-b0) + 6*t*s*(b2-b1) + 3*s*s*(b3-b2);
}	

/* Coefficients for Matrix M */
#define USE_CATMULLROM
#define M11	0.0
#define M12	1.0
#define M13	0.0
#define M14	0.0
#define M21	-0.5
#define M22	0.0
#define M23	0.5
#define M24	0.0
#define M31	1.0
#define M32	-2.5
#define M33	2.0
#define M34	-0.5
#define M41	-0.5
#define M42	1.5
#define M43	-1.5
#define M44	0.5

uniform float inv_alpha_ply;
void main(void)                                                                     
{    								
	float t = gl_TessCoord.x;
	float arclength = mix(arclengthTCS[0], arclengthTCS[3], t) * abs(inv_alpha_ply);			//t * (arclengthTCS[3] - arclengthTCS[0]) + arclengthTCS[0];

#ifdef USE_CATMULLROM
	vec4 c1 =							 M12*gl_in[1].gl_Position;
    vec4 c2 = M21*gl_in[0].gl_Position							  + M23*gl_in[2].gl_Position;
    vec4 c3 = M31*gl_in[0].gl_Position + M32*gl_in[1].gl_Position + M33*gl_in[2].gl_Position + M34*gl_in[3].gl_Position;
    vec4 c4 = M41*gl_in[0].gl_Position + M42*gl_in[1].gl_Position + M43*gl_in[2].gl_Position + M44*gl_in[3].gl_Position;
	
    vec4 yarn_center = ((c4 * t + c3) * t + c2) * t + c1;
	yarn_dir = ((3.0 * c4 * t + 2.0 * c3) * t + c2).xyz;
#else
	vec4 yarn_center = Bezier(t, gl_in[0].gl_Position,		gl_in[1].gl_Position,		gl_in[2].gl_Position,		gl_in[3].gl_Position);
	yarn_dir = BezierDeriv(t, gl_in[0].gl_Position.xyz,	gl_in[1].gl_Position.xyz,	gl_in[2].gl_Position.xyz,	gl_in[3].gl_Position.xyz);
#endif

	yarn_dir = normalize(yarn_dir);
	//gl_Position = view_matrix * yarn_center;
	gl_Position.xyz = yarn_center.xyz;
	gl_Position.w = 1.0;
	
	w_pos = yarn_center;
	w_shadowPos = shadow_matrix * yarn_center;
	w_shadowPos.z -= SHADOW_BIAS;
	ply_shift = arclength;
}